// src/services/musicService.js - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á Background (‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô)
class MusicService {
  constructor() {
    this.quizMusic = null;
    this.menuMusic = null;
    this.currentMusic = null;
    this.isPlaying = false;
    this.volume = 0.3; // ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (30%)
    this.initialized = false;
    // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
    this.musicPath = "/quiz-music.mp3"; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
  }

  async initialize() {
    if (this.initialized) return;

    try {
      console.log("üéµ Initializing music service...");
      console.log("üéµ Music file path:", this.musicPath);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Audio objects
      this.quizMusic = new Audio(this.musicPath);

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏•‡∏á
      this.quizMusic.loop = true;
      this.quizMusic.volume = this.volume;
      this.quizMusic.preload = "auto";

      // Event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug
      this.quizMusic.addEventListener("loadstart", () => {
        console.log("üéµ Music loading started...");
      });

      this.quizMusic.addEventListener("canplay", () => {
        console.log("‚úÖ Music can start playing");
      });

      this.quizMusic.addEventListener("canplaythrough", () => {
        console.log("‚úÖ Music ready to play through");
      });

      this.quizMusic.addEventListener("error", (e) => {
        console.error("‚ùå Quiz music load failed:", e);
        console.error("‚ùå Error details:", {
          error: e.target.error,
          code: e.target.error?.code,
          message: e.target.error?.message,
          src: e.target.src,
        });
      });

      this.quizMusic.addEventListener("loadeddata", () => {
        console.log("‚úÖ Music data loaded successfully");
      });

      // ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô
      await this.testMusicFile();

      this.initialized = true;
      console.log("‚úÖ Music service initialized");
    } catch (error) {
      console.error("‚ùå Music service initialization failed:", error);
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
  async testMusicFile() {
    return new Promise((resolve) => {
      if (!this.quizMusic) {
        console.error("‚ùå Quiz music object not created");
        resolve(false);
        return;
      }

      const timeout = setTimeout(() => {
        console.warn("‚ö†Ô∏è Music file load timeout (10s)");
        resolve(false);
      }, 10000);

      const onLoad = () => {
        clearTimeout(timeout);
        console.log("‚úÖ Music file loaded successfully");
        this.quizMusic.removeEventListener("canplaythrough", onLoad);
        this.quizMusic.removeEventListener("error", onError);
        resolve(true);
      };

      const onError = (e) => {
        clearTimeout(timeout);
        console.error("‚ùå Music file failed to load:", e);
        this.quizMusic.removeEventListener("canplaythrough", onLoad);
        this.quizMusic.removeEventListener("error", onError);
        resolve(false);
      };

      this.quizMusic.addEventListener("canplaythrough", onLoad);
      this.quizMusic.addEventListener("error", onError);

      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î
      this.quizMusic.load();
    });
  }

  async playQuizMusic() {
    if (!this.initialized) await this.initialize();

    try {
      // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà
      this.stopAll();

      if (this.quizMusic) {
        console.log("üéµ Attempting to play quiz music...");
        console.log("üéµ Music ready state:", this.quizMusic.readyState);
        console.log("üéµ Music duration:", this.quizMusic.duration);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (this.quizMusic.readyState >= 2) {
          // HAVE_CURRENT_DATA
          this.quizMusic.currentTime = 0;
          await this.quizMusic.play();
          this.currentMusic = this.quizMusic;
          this.isPlaying = true;
          console.log("‚úÖ Quiz music started playing");
          return true;
        } else {
          console.warn("‚ö†Ô∏è Music not ready yet, trying to load...");

          // ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
          return new Promise((resolve) => {
            const onReady = async () => {
              try {
                this.quizMusic.currentTime = 0;
                await this.quizMusic.play();
                this.currentMusic = this.quizMusic;
                this.isPlaying = true;
                console.log("‚úÖ Quiz music started playing (after load)");
                resolve(true);
              } catch (playError) {
                console.error("‚ùå Failed to play after load:", playError);
                resolve(false);
              }
              this.quizMusic.removeEventListener("canplaythrough", onReady);
            };

            this.quizMusic.addEventListener("canplaythrough", onReady);
            this.quizMusic.load();

            // Timeout ‡∏´‡∏•‡∏±‡∏á 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            setTimeout(() => {
              this.quizMusic.removeEventListener("canplaythrough", onReady);
              console.warn("‚ö†Ô∏è Music load timeout");
              resolve(false);
            }, 5000);
          });
        }
      } else {
        console.error("‚ùå Quiz music object not available");
        return false;
      }
    } catch (error) {
      console.error("‚ùå Failed to play quiz music:", error);

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• error ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      if (error.name === "NotAllowedError") {
        console.warn(
          "‚ö†Ô∏è Autoplay blocked by browser. User interaction required."
        );
      } else if (error.name === "NotSupportedError") {
        console.warn("‚ö†Ô∏è Audio format not supported by browser.");
      }

      return false;
    }
  }

  async playMenuMusic() {
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ
    return this.playQuizMusic();
  }

  stop() {
    if (this.currentMusic) {
      this.currentMusic.pause();
      this.currentMusic.currentTime = 0;
      this.currentMusic = null;
      this.isPlaying = false;
      console.log("üîá Music stopped");
    }
  }

  stopAll() {
    if (this.quizMusic) {
      this.quizMusic.pause();
      this.quizMusic.currentTime = 0;
    }
    this.currentMusic = null;
    this.isPlaying = false;
  }

  pause() {
    if (this.currentMusic && this.isPlaying) {
      this.currentMusic.pause();
      this.isPlaying = false;
      console.log("‚è∏Ô∏è Music paused");
    }
  }

  resume() {
    if (this.currentMusic && !this.isPlaying) {
      this.currentMusic
        .play()
        .then(() => {
          this.isPlaying = true;
          console.log("‚ñ∂Ô∏è Music resumed");
        })
        .catch((error) => {
          console.warn("‚ùå Failed to resume music:", error);
        });
    }
  }

  toggle() {
    if (this.isPlaying) {
      this.pause();
    } else if (this.currentMusic) {
      this.resume();
    } else {
      this.playQuizMusic();
    }
    return this.isPlaying;
  }

  setVolume(volume) {
    this.volume = Math.max(0, Math.min(1, volume)); // 0-1
    if (this.quizMusic) this.quizMusic.volume = this.volume;
    if (this.menuMusic) this.menuMusic.volume = this.volume;
    console.log("üîä Volume set to:", Math.round(this.volume * 100) + "%");
  }

  getVolume() {
    return this.volume;
  }

  isCurrentlyPlaying() {
    return this.isPlaying && this.currentMusic && !this.currentMusic.paused;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  async checkMusicFile() {
    try {
      console.log("üîç Checking if music file exists...");
      const response = await fetch(this.musicPath, { method: "HEAD" });

      if (response.ok) {
        console.log("‚úÖ Music file exists and accessible");
        console.log("üìÑ File info:", {
          status: response.status,
          contentType: response.headers.get("content-type"),
          contentLength: response.headers.get("content-length"),
        });
        return true;
      } else {
        console.error(
          "‚ùå Music file not accessible:",
          response.status,
          response.statusText
        );
        return false;
      }
    } catch (error) {
      console.error("‚ùå Error checking music file:", error);
      return false;
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fade in/out
  async fadeIn(duration = 1000) {
    if (!this.currentMusic) return;

    const startVolume = 0;
    const endVolume = this.volume;
    const steps = 50;
    const stepTime = duration / steps;
    const volumeStep = (endVolume - startVolume) / steps;

    this.currentMusic.volume = startVolume;

    for (let i = 0; i <= steps; i++) {
      setTimeout(() => {
        if (this.currentMusic) {
          this.currentMusic.volume = Math.min(
            startVolume + volumeStep * i,
            endVolume
          );
        }
      }, stepTime * i);
    }
  }

  async fadeOut(duration = 1000) {
    if (!this.currentMusic) return;

    const startVolume = this.currentMusic.volume;
    const endVolume = 0;
    const steps = 50;
    const stepTime = duration / steps;
    const volumeStep = (startVolume - endVolume) / steps;

    for (let i = 0; i <= steps; i++) {
      setTimeout(() => {
        if (this.currentMusic) {
          this.currentMusic.volume = Math.max(
            startVolume - volumeStep * i,
            endVolume
          );
          if (i === steps) {
            this.stop();
          }
        }
      }, stepTime * i);
    }
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á singleton instance
const musicService = new MusicService();

export default musicService;
